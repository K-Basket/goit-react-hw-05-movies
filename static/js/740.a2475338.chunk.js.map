{"version":3,"file":"static/js/740.a2475338.chunk.js","mappings":"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","sources":["Api/Api.js","Pages/MovieDetails/MovieDetailsStyled.jsx","Pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\n// запрос списка самых популярных фильмов на сегодня для создания коллекции на главной странице.\nexport const getTrending = async () => {\n  const options = {\n    method: 'GET',\n    url: 'https://api.themoviedb.org/3/trending/all/day',\n    params: { language: 'en-US' },\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiYTE3MThlNWQ1NDhkODg4MDEzODNmYmFlOWVkMDhjMCIsInN1YiI6IjY0NzBiMzVhNzI2ZmIxMDBjMmU1ZDlhYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.OsStYVQowb3r8uBKh_yvVUgt-6im-LahqBvtNCcHJ8w',\n    },\n  };\n\n  const { data } = await axios.request(options);\n\n  return data.results;\n};\n\n// запрос полной информации о фильме для страницы кинофильма\nexport const getMovieDetails = async movieId => {\n  const options = {\n    method: 'GET',\n    url: `https://api.themoviedb.org/3/movie/${movieId}`,\n    params: { language: 'en-US' },\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiYTE3MThlNWQ1NDhkODg4MDEzODNmYmFlOWVkMDhjMCIsInN1YiI6IjY0NzBiMzVhNzI2ZmIxMDBjMmU1ZDlhYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.OsStYVQowb3r8uBKh_yvVUgt-6im-LahqBvtNCcHJ8w',\n    },\n  };\n  const { data } = await axios.request(options);\n  return data;\n};\n\n// запрос информации об актёрском составе для страницы кинофильма\nexport const getMovieCredits = async movieId => {\n  const options = {\n    method: 'GET',\n    url: `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n    params: { language: 'en-US' },\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiYTE3MThlNWQ1NDhkODg4MDEzODNmYmFlOWVkMDhjMCIsInN1YiI6IjY0NzBiMzVhNzI2ZmIxMDBjMmU1ZDlhYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.OsStYVQowb3r8uBKh_yvVUgt-6im-LahqBvtNCcHJ8w',\n    },\n  };\n\n  const { data } = await axios.request(options);\n  return data.cast;\n};\n\n// запрос обзоров для страницы кинофильма\nexport const getMovieReviews = async movieId => {\n  const options = {\n    method: 'GET',\n    url: `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n    params: { language: 'en-US', page: '1' },\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiYTE3MThlNWQ1NDhkODg4MDEzODNmYmFlOWVkMDhjMCIsInN1YiI6IjY0NzBiMzVhNzI2ZmIxMDBjMmU1ZDlhYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.OsStYVQowb3r8uBKh_yvVUgt-6im-LahqBvtNCcHJ8w',\n    },\n  };\n\n  const { data } = await axios.request(options);\n  return data.results;\n};\n\n// поиск кинофильма по ключевому слову на странице фильмов\nexport const getMovieSearch = async query => {\n  const options = {\n    method: 'GET',\n    url: 'https://api.themoviedb.org/3/search/movie',\n    params: {\n      query: `${query}`,\n      include_adult: 'false',\n      language: 'en-US',\n      page: '1',\n    },\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiYTE3MThlNWQ1NDhkODg4MDEzODNmYmFlOWVkMDhjMCIsInN1YiI6IjY0NzBiMzVhNzI2ZmIxMDBjMmU1ZDlhYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.OsStYVQowb3r8uBKh_yvVUgt-6im-LahqBvtNCcHJ8w',\n    },\n  };\n\n  const { data } = await axios.request(options);\n  return data.results;\n};\n\n// getTrending().then(data => console.log('getTrending :>> ', data));\n\n// getMovieSearch('car').then(data => console.log('Search :>> ', data));\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  max-width: 1200px;\n  padding: 0px 20px 20px 20px;\n  margin-bottom: 15px;\n\n  border-bottom: 1px solid gray;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.15);\n`;\n\nexport const MovieDescript = styled.ul`\n  display: flex;\n  justify-content: space-between;\n  gap: 40px;\n\n  margin: 0;\n  padding: 0;\n\n  list-style: none;\n\n  /* background-color: #e7e7e7; // --temp */\n\n  & > li:first-child {\n    min-width: 25%;\n    max-width: 25%;\n\n    /* outline: 1px solid salmon; */\n\n    & img {\n      box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n        0px 4px 5px 0px rgba(0, 0, 0, 0.14),\n        0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n    }\n  }\n\n  & > li:last-child {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n\n  & > li:last-child > div > ul {\n    display: flex;\n    gap: 5px;\n    /* width: 700px; */\n\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n`;\n\nexport const ListStyled = styled.ul`\n  color: blue;\n\n  /* & li {\n    margin-bottom: 5px;\n  } */\n`;\n\nexport const LinkStyled = styled(Link)`\n  color: blue;\n  text-decoration: none;\n\n  &:hover {\n    color: red;\n  }\n`;\n\nexport const LinkBackStyled = styled(Link)`\n  display: inline-block;\n  margin-bottom: 15px;\n  padding: 6px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  /* color: black; */\n  color: white;\n  background-color: orangered;\n  font-weight: 500;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n","import { getMovieSearch } from 'Api/Api';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { Container } from './MovieDetails/MovieDetailsStyled';\n\nconst Movies = () => {\n  const location = useLocation();\n  const [searchInput, setSearchInput] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams(); // читать/перезаписывать строку запроса\n  const query = searchParams.get('query') ?? ''; // записывает значение query или пустую строку\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const movieSearch = await getMovieSearch(query);\n        setMovies(movieSearch);\n\n        // console.log('Search :>> ', movieSearch);\n      } catch (error) {\n        console.warn(error);\n      }\n    })();\n  }, [query]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (searchInput === '') {\n      return Notiflix.Notify.warning('Add movie search');\n    }\n\n    setSearchParams({}); // очищаем строку запроса от search\n    setSearchParams({ query: searchInput });\n    setSearchInput('');\n  };\n\n  const updateQueryString = evt => {\n    // setSearchInput(evt.target.value.trim()); // записываем в State данные input\n    setSearchInput(evt.target.value); // записываем в State данные input\n  };\n\n  return (\n    <Container>\n      <form onSubmit={handleSubmit}>\n        <button type=\"submit\">Submit</button>\n\n        <input\n          type=\"text\"\n          name=\"search\"\n          value={searchInput} // получаем из State\n          onChange={updateQueryString}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movie\"\n        />\n      </form>\n\n      <ul>\n        {movies.map(movie => {\n          return (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </Container>\n  );\n};\n\nexport default Movies;\n"],"names":["getTrending","options","method","url","params","language","headers","accept","Authorization","axios","data","results","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","page","getMovieSearch","query","include_adult","Container","styled","MovieDescript","ListStyled","LinkStyled","Link","LinkBackStyled","location","useLocation","useState","searchInput","setSearchInput","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","movieSearch","console","warn","onSubmit","evt","preventDefault","Notiflix","type","name","value","onChange","target","autoComplete","autoFocus","placeholder","map","movie","to","id","state","from","title"],"sourceRoot":""}